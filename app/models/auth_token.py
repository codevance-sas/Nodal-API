from datetime import datetime, timedelta
from typing import Optional
from sqlmodel import SQLModel, Field, Column, DateTime, func

class AuthToken(SQLModel, table=True):
    """
    Model for tracking authentication tokens sent via email.
    This allows enforcing the rule that a token cannot be regenerated
    for the same email unless done by an admin.
    """
    __tablename__ = "auth_tokens"
    
    email: str = Field(primary_key=True, index=True)
    token_hash: str = Field(index=True)
    created_at: datetime = Field(sa_column=Column(DateTime, default=func.now()))
    expires_at: datetime
    is_used: bool = Field(default=False)
    is_admin_generated: bool = Field(default=False)
    
    @classmethod
    def create(cls, email: str, token_hash: str, expires_in_days: int = 2, is_admin_generated: bool = False):
        """
        Create a new auth token record.
        
        Args:
            email: The email address the token was issued to
            token_hash: Hash of the token
            expires_in_days: Number of days until the token expires
            is_admin_generated: Whether the token was generated by an admin
            
        Returns:
            A new AuthToken instance
        """
        now = datetime.utcnow()
        expires_at = now + timedelta(days=expires_in_days)
        
        return cls(
            email=email,
            token_hash=token_hash,
            created_at=now,
            expires_at=expires_at,
            is_used=False,
            is_admin_generated=is_admin_generated
        )