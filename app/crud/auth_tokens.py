from datetime import datetime
from typing import Optional, List
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_

from app.models.auth_token import AuthToken

class AuthTokenCRUD:
    """
    CRUD operations for AuthToken model.
    """
    
    @staticmethod
    def create_token(db: Session, email: str, token_hash: str, expires_in_days: int = 2, is_admin_generated: bool = False) -> AuthToken:
        """
        Create a new auth token record.
        
        Args:
            db: Database session
            email: The email address the token was issued to
            token_hash: Hash of the token
            expires_in_days: Number of days until the token expires
            is_admin_generated: Whether the token was generated by an admin
            
        Returns:
            The created AuthToken instance
        """
        token = AuthToken.create(
            email=email,
            token_hash=token_hash,
            expires_in_days=expires_in_days,
            is_admin_generated=is_admin_generated
        )
        
        db.add(token)
        db.commit()
        db.refresh(token)
        
        return token
        
    @staticmethod
    def delete_token_by_email(db: Session, email: str) -> bool:
        """
        Delete an auth token record by email.
        
        Args:
            db: Database session
            email: The email address of the token to delete
            
        Returns:
            True if a token was deleted, False otherwise
        """
        result = db.query(AuthToken).filter(AuthToken.email == email).delete()
        db.commit()
        
        return result > 0
    
    @staticmethod
    def get_token_by_email(db: Session, email: str) -> Optional[AuthToken]:
        """
        Get the auth token record for an email.
        
        Args:
            db: Database session
            email: The email address to look up
            
        Returns:
            The AuthToken instance if found, None otherwise
        """
        return db.query(AuthToken).filter(AuthToken.email == email).first()
    
    @staticmethod
    def get_token_by_hash(db: Session, token_hash: str) -> Optional[AuthToken]:
        """
        Get the auth token record by token hash.
        
        Args:
            db: Database session
            token_hash: Hash of the token to look up
            
        Returns:
            The AuthToken instance if found, None otherwise
        """
        return db.query(AuthToken).filter(AuthToken.token_hash == token_hash).first()
    
    @staticmethod
    def mark_token_as_used(db: Session, token: AuthToken) -> AuthToken:
        """
        Mark a token as used.
        
        Args:
            db: Database session
            token: The token to mark as used
            
        Returns:
            The updated AuthToken instance
        """
        token.is_used = True
        db.commit()
        db.refresh(token)
        
        return token
    
    @staticmethod
    def can_generate_token(db: Session, email: str) -> bool:
        """
        Check if a token can be generated for an email.
        A token can be generated if:
        1. There is no existing token for the email, or
        2. The existing token is expired, or
        3. The existing token has been used
        
        Args:
            db: Database session
            email: The email address to check
            
        Returns:
            True if a token can be generated, False otherwise
        """
        token = AuthTokenCRUD.get_token_by_email(db, email)
        
        if not token:
            return True
            
        now = datetime.utcnow()
        
        # Token can be generated if it's expired or used
        return token.expires_at < now or token.is_used
    
    @staticmethod
    def delete_expired_tokens(db: Session) -> int:
        """
        Delete all expired tokens.
        
        Args:
            db: Database session
            
        Returns:
            Number of tokens deleted
        """
        now = datetime.utcnow()
        result = db.query(AuthToken).filter(AuthToken.expires_at < now).delete()
        db.commit()
        
        return result
    
    @staticmethod
    def get_all_tokens(db: Session, skip: int = 0, limit: int = 100) -> List[AuthToken]:
        """
        Get all auth tokens with pagination.
        
        Args:
            db: Database session
            skip: Number of records to skip
            limit: Maximum number of records to return
            
        Returns:
            List of AuthToken instances
        """
        return db.query(AuthToken).offset(skip).limit(limit).all()

auth_token_crud = AuthTokenCRUD()